В SQL различаются следующие виды объектов:

база данных (database);
таблица (table);
столбец (column);
индекс (index);
снимок (view);
синоним (synonym).

******************************************

FOREIGN KEY (столбец_1, столбец_№)
REFERENCES имя_таблицы (столбец_1)
[ON DELETE действие]
[ON UPDATE ДЕЙСТВИЕ]
CASCADE - автоматически удаляет или изменят строки из зависимой таблицы
при удалении или изменении связанных строк в главной таблице
SET NULL -при удалении или обновлении связанной строки из главной таблицы утанавливает для столбца внешнего ключа значение NULL
SET DEFAULT - при удалении строки из главной таблицы устанавливает для столбца снешнего ключа значение по умолчанию
RESTRICT (NO ACTION) - отклоняет удаление или изменение строк главной таблице при наличии связанных строк в зависимой таблице

Подзапросы (вложенные запросы)
- однострочные запросы (>, <, <=, !=, <>, =)
- многострочные запрсы (IN или NOT IN)

******************************************************************************************************************



CREATE - создать
WHERE - где
ALTER - изменить
DROP - удаляет таблицу
DELETE - очистить,стереть,удалить
INSERT - вставить
SELECT - выбрать,показать
FROM - из
UPDATE - обновить
IN - в
SET - установить
IS - является
NULL - пустой
LIKE - является,похож,равна,подобно
GLOB -
NOT - не
AS - как
RENAME - ПЕРЕИМЕНОВАТЬ
TO - к
INTO - в
DISTINCT - индивидуальный
ORDER BY - сортировать по
GROUP BY - группировать по
HAVING - ИМЕЮЩИЙ, условие
BY - по
REFERENCES - соеденен, ИСПОЛЬЗОВАННАЯ ЛИТЕРАТУРА
FOREIGN - Внешний ключ







Функция агрегирования
SUM - в пределах столбца с числовыми значениями
AVG - нахождение среднего арифметического (суммаэлементов разделенная на их количество)
COUNT - количество строк
MIN
MAX
NULL – значение NULL;
INTEGER – целочисленный тип (занимает от 1 до 8 байт);
REAL – вещественный тип (8 байт в формате IEEE);
TEXT – строковый тип (в кодировке данных базы, обычно UTF-8);
BLOB (двоичные данные, хранятся «как есть», например, для небольших изображений).

NOT – условное НЕ: NOT exp. Преобразует ложное условие в истинное и, наоборот, истинное – в ложное.
AND – условное И: exp1 AND exp2. Истинно, если одновременно истинны exp1 и exp2.
OR – условное ИЛИ: exp1 OR exp2. Истинно, если истинно exp1 или exp2 или оба выражения.
IN – вхождение во множество значений: col IN (val1, val2, …)
NOT IN – не вхождение во множество значений: col NOT IN (val1, val2, …)



SELECT * FROM users - показать все поля таблицы
"CREATE TABLE IF NOT EXISTS users" - создать таблицу если ее нет
"DROP TABLE users" - удалить таблицу
если хотим что бы в ячейках были ограничения для вводимых данных то к примеру NOT NULL - обязательное поле для заполнения
DEFAULT 1 -  если значение не вписанно в таблицу то это вписывает значение которое указывается после него то есть 1
user_id INT PRIMARY KEY - создаем дополнительное поле с уникальным значением
AUTOINCREMENT - увеличивает значение поля приватного ключа на 1

INSERT - добавление записи в таблицу
SELECT - выборка данных из таблиц(в том числе и при создании сводной выборки из нескольких таблиц)

INSERT INTO users VALUES ('Михаил', 1, 19, 1000) - добавить данные во все столбцы таблицы
INSERT INTO users(name, old, score) VALUES ('Миша', 132, 200) - добавляем в определенные столбцы данные

SELECT name, old, score FROM users - выбрать и показать указанные стобцы или поля
SELECT * FROM users - если нужно все поля выбрать
SELECT * FROM users WHERE score < 1000 - выбрать все строки у которых одна колонка соответствует условию
SELECT * FROM users WHERE score BETWEEN 500 AND 1000 - ВЫВОдим колонку с заданным интеревалом
SELECT * FROM users WHERE old IN(19, 32) AND score < 1000 - возраст или 19 или 32 и очки меньше 1000
SELECT * FROM users WHERE old IN(19, 32) AND score > 300 OR sex = 1 - AND имеет приоритет от OR, возраст 19 или 32 ,очки больше 300 или мужщина

Сортировка ORDER BY - сортирует по возрастанию,указывается поле, по которому производится сортировка записей в выборке
ORDER BY old DESC - по убыванию
ORDER BY old ASC - явно показываем что сортируем по возрастанию

пример переименований названий заголовков при выводе - показать айди как и различные варианты -если два слова то ас надо и кавычки или квадратные скобки
SELECT ID AS 'Код по магазину', Produce AS "название продукта",
Material AS материал, Color цвет, Country AS [страна производитель]
***********************************************


**********************************
Таблица Salespeople:
snum - номер продавца (первичный ключ)
sname - имя продавца
com - комиссионные продавца
city - город проживания продавца

Таблица Orders:
onum - номер заказа (первичный ключ)
snum - номер продавца
cnum - номер заказчика
amt - сумма заказа
odate - дата заказа

Таблица Customers:
cnum - номер заказчика (первичный ключ)
cname – имя заказчика (клиента)
city - город проживания заказчика
snum - номер продавца
rating - рейтинг
**********************************************




******************************************
Таблица Client:
INNClient - идентификационный номер клиента (первичный ключ)
Client – клиент
Status - место продажи

Таблица ClientGoods:
IDParty – (первичный ключ)
ID – (внешний ключ)
INNClient – идентификационный номер клиента (внешний ключ)
CostUnit – стоимость за единицу 
Count - количество приобретенного товара

Таблица SallerGoods:
ID – (первичный ключ)
Code – код товара
INNSeller – идентификационный код продавца (внешний ключ)
DateStart – дата
Goods – товар
CostUnit – стоимость за единицу
Count - количество товара на складе

Таблица Seller:
INNSeller - идентификационный код продавца (первичный ключ)
Seller – продавец
Status - статус
*****************************************************

*
Показать какие продавцы продают какие товары.
SELECT s.Seller, sq.Goods- имя таблицы и название колонки,тут указываем кого ищем по заданию
FROM Seller s, SallerGoods sq - переименуем название таблицы в более короткое,тут указываем из каких таблиц берем данные
WHERE s.INNSeller = sq.INNSeller- связь между таблицами
*
Вывести продавцов и клиентов (пары), связанные м/у собой приобретенным товаром.
SELECT c.Client, sq.Goods
FROM Seller s, SallerGoods sq, Client c, ClientGoods cg
WHERE s.INNSeller = sq.INNSeller AND cg.ID = sq.ID AND c.INNClient = cg.INNClient - связь между таблицами по очередно как на схеме

*
Вывести список товара, поставляемого производителями.
SELECT sq.Goods, s.Status
FROM Seller s, SallerGoods sq 
WHERE s.INNSeller = sq.INNSeller AND s.Status = 'производитель' - помимо связи таблиц указываем производителя 
*
Определите поставщиков, сделки с которыми заключили 10-11/11/2007.
SELECT s.Seller, sq.DateStart
FROM Seller s, SallerGoods sq 
WHERE s.INNSeller = sq.INNSeller AND sq.DateStart BETWEEN '2007-11-10' AND '2007-11-12' - связали айди которые одни и теже в разных таблицах и из одной таблицы вывели продавцов(поставщиков) ищем 10 и 11 числа так как BETWEEN не включает конечное число то ставим 12 
*
Вывести список товаров, если фирма купила их на сумму больше 1000.
SELECT sq.goods, ROUND(sq.CostUnit * sq.Count, 2) - показать товары + стоимость
FROM SallerGoods sq - из таблицы такой то
WHERE sq.CostUnit * sq.Count > 1000 - где столбцы стоимость и количество товара перемножаются и имеют цифру больше 1000
*
Сосчитать количество клиентов, покупающих товар.
SELECT COUNT (Client) AS [Количество клиентов] - ПОказать количество столба клиент и присвоить название количество клиентов
FROM Client - из таблицы клиенты
*
Сколько посредников поставляют товар для фирмы.
SELECT COUNT (Seller) AS [Количество посредников] - показать количество столбца и присволить значение столба (для ясности того что выводим)
FROM Seller - из таблицы селлер
WHERE Status LIKE 'посредник' - где статус равен посредник
*
Вывести среднюю сумму сделки по проданному товару.
SELECT AVG(CostUnit * Count) AS [Средняя сумма сделки] - показать ,сначало в скобках перемножаем стоимость товара за ед. * на количество потом функция авг высчитывает среднюю стоимость и присваиваем другое название колонки для ясности
FROM ClientGoods
*
Посчитать на какую сумму было продано товара магазинам.
SELECT SUM(cg.CostUnit * cg.Count) AS [Сумма проданного товара] - показать,сначало перемножаем количество и стоимость товара а потом сумм находит сумму всех строчек с товаром
FROM ClientGoods cg, Client c - из таблиц таких то и присваиваем им переменные
WHERE c.Status LIKE 'магазин' AND c.INNClient = cg.INNClient - где статус = магазин и связываем инн клиент из двух таблиц c. и cg.
*
Напишите запрос, который выбрал бы высший рейтинг в каждом городе.
SELECT city, MAX(rating) - показать колонку города,у которых максимальный рейтинг
FROM Customers
GROUP BY city - выводит город по одному разу так он  повторются в колонке,группирует как бы убирая повторения и оставляет максимальный рейтинг
*
Подсчитать, на какую сумму было продано товаров в каждый город.
SELECT c.city, SUM(o.amt) - выбрать из таблицы Customers сумму всех проданных товаров которые в колонке amt
FROM Customers c, Orders o
WHERE o.cnum = c.cnum - связываем номера заказов
GROUP BY c.city
*
Напишите запрос, который получит максимальную сумму заказов каждого клиента, которая больше 3000
SELECT o.cnum, SUM(o.amt) - показать номаера заказов которые максимальные
FROM Orders o
GROUP BY o.cnum - группировать в талице Orders колонку с номерами заказов
HAVING MAX(o.amt) > 3000 - условие максимальная сумма заказа больше 3000
*
Напишите запрос, который из таблицы заказов найдет минимальную сумму для каждой даты заказа, отсортировав по убыванию даты.
SELECT o.odate, MIN (o.amt) - показать стоббец дата и сумму заказа
FROM Orders o - из таблицы Orders 
GROUP BY o.odate - сортировать даты по убыванию
ORDER BY o.odate DESC
*
Напишите запрос, который выведет сумму продаж, которая больше 10000
SELECT SUM(o.amt) - сумма продаж
FROM Orders o
GROUP BY o.odate - групировать дату с условием стоимость выше 10000
HAVING SUM(o.amt) > 10000
*
Выведите перечень сумм заказов продавца Rifkin.
обычный запрос
SELECT o.amt
FROM Orders o, Salespeople s
WHERE s.sname = 'Rifkin' AND s.snum = o.snumm;

однострочный запрос
SELECT amt
FROM Orders
WHERE snum = 
	(SELECT snum 
	FROM Salespeople
	WHERE sname = 'Rifkin');
*
Определите  комиссионные всех продавцов, обслуживающих заказчиков в Риме
1 обычный
SELECT s.com
FROM Salespeople s, Customers c
WHERE c.city LIKE 'Rome' AND s.snum = c.snum;

2 многострочный ,дополнительно пишется IN
SELECT com
FROM Salespeople
WHERE snum IN 
(SELECT snum 
FROM Customers
WHERE city = 'Rome');
*
Напишите запрос, который определит заказчиков имеющих рейтинг ниже среднего.
сначало выполняется одзапрос в скобках потом основной
SELECT cname, rating
FROM Customers
WHERE rating < 
    (SELECT AVG(rating) 
    FROM Customers)

*
Определите города проживания заказчиков с наименьшим рейтингом.
SELECT city, MIN(rating)
FROM Customers
GROUP BY city
HAVING MIN(rating) IN 
    (SELECT MIN(rating) 
    FROM Customers)

*
Выведите список студентов физико-математического факультета.
SELECT FIO
FROM Student
WHERE [Group] IN
    (SELECT [Group] 
    FROM G
    WHERE Kafedra IN
        (SELECT Kafedra
        FROM Kafedra
        WHERE Decanat LIKE 'Физико-математический')
        )